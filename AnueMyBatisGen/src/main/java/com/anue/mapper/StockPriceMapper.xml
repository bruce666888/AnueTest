<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.anue.mapper.StockPriceMapper">
  <resultMap id="BaseResultMap" type="com.anue.pojo.StockPrice">
    <id column="priceId" jdbcType="INTEGER" property="priceid" />
    <id column="fk_stockId" jdbcType="INTEGER" property="fkStockid" />
    <result column="transDate" jdbcType="DATE" property="transdate" />
    <result column="transTime" jdbcType="TIME" property="transtime" />
    <result column="transPrice" jdbcType="INTEGER" property="transprice" />
    <result column="transQuantity" jdbcType="INTEGER" property="transquantity" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updatetime" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    priceId, fk_stockId, transDate, transTime, transPrice, transQuantity, updateTime, 
    createTime
  </sql>
  <select id="selectByExample" parameterType="com.anue.pojo.StockPriceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from StockPrice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.anue.pojo.StockPriceKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from StockPrice
    where priceId = #{priceid,jdbcType=INTEGER}
      and fk_stockId = #{fkStockid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.anue.pojo.StockPriceKey">
    delete from StockPrice
    where priceId = #{priceid,jdbcType=INTEGER}
      and fk_stockId = #{fkStockid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.anue.pojo.StockPrice">
    insert into StockPrice (priceId, fk_stockId, transDate, 
      transTime, transPrice, transQuantity, 
      updateTime, createTime)
    values (#{priceid,jdbcType=INTEGER}, #{fkStockid,jdbcType=INTEGER}, #{transdate,jdbcType=DATE}, 
      #{transtime,jdbcType=TIME}, #{transprice,jdbcType=INTEGER}, #{transquantity,jdbcType=INTEGER}, 
      #{updatetime,jdbcType=TIMESTAMP}, #{createtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.anue.pojo.StockPrice">
    insert into StockPrice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="priceid != null">
        priceId,
      </if>
      <if test="fkStockid != null">
        fk_stockId,
      </if>
      <if test="transdate != null">
        transDate,
      </if>
      <if test="transtime != null">
        transTime,
      </if>
      <if test="transprice != null">
        transPrice,
      </if>
      <if test="transquantity != null">
        transQuantity,
      </if>
      <if test="updatetime != null">
        updateTime,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="priceid != null">
        #{priceid,jdbcType=INTEGER},
      </if>
      <if test="fkStockid != null">
        #{fkStockid,jdbcType=INTEGER},
      </if>
      <if test="transdate != null">
        #{transdate,jdbcType=DATE},
      </if>
      <if test="transtime != null">
        #{transtime,jdbcType=TIME},
      </if>
      <if test="transprice != null">
        #{transprice,jdbcType=INTEGER},
      </if>
      <if test="transquantity != null">
        #{transquantity,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.anue.pojo.StockPrice">
    update StockPrice
    <set>
      <if test="transdate != null">
        transDate = #{transdate,jdbcType=DATE},
      </if>
      <if test="transtime != null">
        transTime = #{transtime,jdbcType=TIME},
      </if>
      <if test="transprice != null">
        transPrice = #{transprice,jdbcType=INTEGER},
      </if>
      <if test="transquantity != null">
        transQuantity = #{transquantity,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null">
        updateTime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where priceId = #{priceid,jdbcType=INTEGER}
      and fk_stockId = #{fkStockid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.anue.pojo.StockPrice">
    update StockPrice
    set transDate = #{transdate,jdbcType=DATE},
      transTime = #{transtime,jdbcType=TIME},
      transPrice = #{transprice,jdbcType=INTEGER},
      transQuantity = #{transquantity,jdbcType=INTEGER},
      updateTime = #{updatetime,jdbcType=TIMESTAMP},
      createTime = #{createtime,jdbcType=TIMESTAMP}
    where priceId = #{priceid,jdbcType=INTEGER}
      and fk_stockId = #{fkStockid,jdbcType=INTEGER}
  </update>
</mapper>